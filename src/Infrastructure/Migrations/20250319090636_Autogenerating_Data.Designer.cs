// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250319090636_Autogenerating_Data")]
    partial class Autogenerating_Data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Analitycs.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReporterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Topic")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1111111-1111-1111-1111-111111111111"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 634, DateTimeKind.Utc).AddTicks(5064),
                            Data = "Genetic research data goes here...",
                            ReporterId = new Guid("11112222-3333-4444-5555-666677778888"),
                            Title = "Annual Genetic Study",
                            Topic = 1
                        },
                        new
                        {
                            Id = new Guid("a2222222-2222-2222-2222-222222222222"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 634, DateTimeKind.Utc).AddTicks(6146),
                            Data = "Performance analysis data goes here...",
                            ReporterId = new Guid("99990000-aaaa-bbbb-cccc-ddddeeeeffff"),
                            Title = "AI Algorithm Performance",
                            Topic = 1
                        },
                        new
                        {
                            Id = new Guid("a3333333-3333-3333-3333-333333333333"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 634, DateTimeKind.Utc).AddTicks(6152),
                            Data = "Pandemic analysis data goes here...",
                            ReporterId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            Title = "Global Pandemic Analysis",
                            Topic = 0
                        });
                });

            modelBuilder.Entity("Domain.Models.Nature.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double>("RadiusAffected")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("NatLocations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1111111-1111-1111-1111-111111111111"),
                            City = "Addis Ababa",
                            Country = "Ethiopia",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 634, DateTimeKind.Utc).AddTicks(6502),
                            Latitude = 50.450099999999999,
                            Longitude = 30.523399999999999,
                            RadiusAffected = 10.0
                        },
                        new
                        {
                            Id = new Guid("b2222222-2222-2222-2222-222222222222"),
                            City = "Mumbai",
                            Country = "India",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 634, DateTimeKind.Utc).AddTicks(7139),
                            Latitude = 49.8429,
                            Longitude = 24.031600000000001,
                            RadiusAffected = 10.0
                        },
                        new
                        {
                            Id = new Guid("b3333333-3333-3333-3333-333333333333"),
                            City = "Phoenix",
                            Country = "USA",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 634, DateTimeKind.Utc).AddTicks(7143),
                            Latitude = 46.482500000000002,
                            Longitude = 30.732600000000001,
                            RadiusAffected = 10.0
                        },
                        new
                        {
                            Id = new Guid("b4444444-4444-4444-4444-444444444444"),
                            City = "Sydney",
                            Country = "Australia",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 634, DateTimeKind.Utc).AddTicks(7145),
                            Latitude = 50.450099999999999,
                            Longitude = 30.523399999999999,
                            RadiusAffected = 10.0
                        },
                        new
                        {
                            Id = new Guid("b5555555-5555-5555-5555-555555555555"),
                            City = "Beijing",
                            Country = "China",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 634, DateTimeKind.Utc).AddTicks(7147),
                            Latitude = 49.993499999999997,
                            Longitude = 36.229199999999999,
                            RadiusAffected = 10.0
                        },
                        new
                        {
                            Id = new Guid("b6666666-6666-6666-6666-666666666666"),
                            City = "Uzhhorod",
                            Country = "Ukraine",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 634, DateTimeKind.Utc).AddTicks(7160),
                            Latitude = 48.464700000000001,
                            Longitude = 35.0456,
                            RadiusAffected = 10.0
                        });
                });

            modelBuilder.Entity("Domain.Models.Nature.SoilDeficiency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("CadmiumConcentration")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EDangerState")
                        .HasColumnType("integer");

                    b.Property<double>("ElectricalConductivity")
                        .HasColumnType("double precision");

                    b.Property<double>("HeavyMetalsConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("LeadConcentration")
                        .HasColumnType("double precision");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<double>("MercuryConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("MicrobialActivity")
                        .HasColumnType("double precision");

                    b.Property<double>("NitratesConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("OrganicMatter")
                        .HasColumnType("double precision");

                    b.Property<double>("PH")
                        .HasColumnType("double precision");

                    b.Property<double>("PesticidesContent")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ResponsibleUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("SoilDeficiencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1111111-1111-1111-1111-111111111111"),
                            AnalysisDate = new DateTime(2025, 1, 14, 22, 0, 0, 0, DateTimeKind.Utc),
                            CadmiumConcentration = 1.2,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 635, DateTimeKind.Utc).AddTicks(599),
                            CreatorId = new Guid("99990000-aaaa-bbbb-cccc-ddddeeeeffff"),
                            Description = "",
                            EDangerState = 0,
                            ElectricalConductivity = 0.69999999999999996,
                            HeavyMetalsConcentration = 120.0,
                            LeadConcentration = 150.0,
                            LocationId = new Guid("b4444444-4444-4444-4444-444444444444"),
                            MercuryConcentration = 0.59999999999999998,
                            MicrobialActivity = 3200.0,
                            NitratesConcentration = 45.0,
                            OrganicMatter = 3.7999999999999998,
                            PH = 6.5,
                            PesticidesContent = 0.80000000000000004,
                            ResponsibleUserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            Title = "First Soil def",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d2222222-2222-2222-2222-222222222222"),
                            AnalysisDate = new DateTime(2025, 1, 17, 22, 0, 0, 0, DateTimeKind.Utc),
                            CadmiumConcentration = 2.5,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 635, DateTimeKind.Utc).AddTicks(2791),
                            CreatorId = new Guid("99990000-aaaa-bbbb-cccc-ddddeeeeffff"),
                            Description = "",
                            EDangerState = 2,
                            ElectricalConductivity = 0.90000000000000002,
                            HeavyMetalsConcentration = 200.0,
                            LeadConcentration = 250.0,
                            LocationId = new Guid("b5555555-5555-5555-5555-555555555555"),
                            MercuryConcentration = 1.1000000000000001,
                            MicrobialActivity = 1500.0,
                            NitratesConcentration = 60.0,
                            OrganicMatter = 2.5,
                            PH = 5.9000000000000004,
                            PesticidesContent = 1.5,
                            ResponsibleUserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            Title = "Second Soil def",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d3333333-3333-3333-3333-333333333333"),
                            AnalysisDate = new DateTime(2025, 1, 19, 22, 0, 0, 0, DateTimeKind.Utc),
                            CadmiumConcentration = 0.80000000000000004,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 635, DateTimeKind.Utc).AddTicks(2808),
                            CreatorId = new Guid("99990000-aaaa-bbbb-cccc-ddddeeeeffff"),
                            Description = "",
                            EDangerState = 1,
                            ElectricalConductivity = 0.5,
                            HeavyMetalsConcentration = 50.0,
                            LeadConcentration = 80.0,
                            LocationId = new Guid("b6666666-6666-6666-6666-666666666666"),
                            MercuryConcentration = 0.29999999999999999,
                            MicrobialActivity = 4000.0,
                            NitratesConcentration = 30.0,
                            OrganicMatter = 4.0999999999999996,
                            PH = 7.2000000000000002,
                            PesticidesContent = 0.5,
                            ResponsibleUserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            Title = "Third Soil def",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Domain.Models.Nature.WaterDeficiency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("BiologicalOxygenDemand")
                        .HasColumnType("double precision");

                    b.Property<double>("CadmiumConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("ChemicalOxygenDemand")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DissolvedOxygen")
                        .HasColumnType("double precision");

                    b.Property<int>("EDangerState")
                        .HasColumnType("integer");

                    b.Property<double>("ElectricalConductivity")
                        .HasColumnType("double precision");

                    b.Property<double>("LeadConcentration")
                        .HasColumnType("double precision");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<double>("MercuryConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("MicrobialActivity")
                        .HasColumnType("double precision");

                    b.Property<double>("MicrobialLoad")
                        .HasColumnType("double precision");

                    b.Property<double>("NitrateConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("PH")
                        .HasColumnType("double precision");

                    b.Property<double>("PesticidesContent")
                        .HasColumnType("double precision");

                    b.Property<double>("PhosphateConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("RadiationLevel")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ResponsibleUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalDissolvedSolids")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("WaterDeficiencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1111111-1111-1111-1111-111111111111"),
                            BiologicalOxygenDemand = 4.5,
                            CadmiumConcentration = 0.029999999999999999,
                            ChemicalOxygenDemand = 0.0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 634, DateTimeKind.Utc).AddTicks(7718),
                            CreatorId = new Guid("11112222-3333-4444-5555-666677778888"),
                            Description = "",
                            DissolvedOxygen = 6.7999999999999998,
                            EDangerState = 0,
                            ElectricalConductivity = 1.2,
                            LeadConcentration = 0.14999999999999999,
                            LocationId = new Guid("b1111111-1111-1111-1111-111111111111"),
                            MercuryConcentration = 0.02,
                            MicrobialActivity = 0.0,
                            MicrobialLoad = 1500.0,
                            NitrateConcentration = 20.0,
                            PH = 7.2000000000000002,
                            PesticidesContent = 0.10000000000000001,
                            PhosphateConcentration = 2.1000000000000001,
                            RadiationLevel = 0.0,
                            ResponsibleUserId = new Guid("11112222-3333-4444-5555-666677778888"),
                            Title = "First Water def",
                            TotalDissolvedSolids = 500.0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("c2222222-2222-2222-2222-222222222222"),
                            BiologicalOxygenDemand = 8.0,
                            CadmiumConcentration = 0.14999999999999999,
                            ChemicalOxygenDemand = 0.0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 635, DateTimeKind.Utc).AddTicks(253),
                            CreatorId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            Description = "",
                            DissolvedOxygen = 4.0,
                            EDangerState = 2,
                            ElectricalConductivity = 2.5,
                            LeadConcentration = 0.5,
                            LocationId = new Guid("b2222222-2222-2222-2222-222222222222"),
                            MercuryConcentration = 0.10000000000000001,
                            MicrobialActivity = 0.0,
                            MicrobialLoad = 4000.0,
                            NitrateConcentration = 50.0,
                            PH = 6.5,
                            PesticidesContent = 0.80000000000000004,
                            PhosphateConcentration = 5.5,
                            RadiationLevel = 0.0,
                            ResponsibleUserId = new Guid("99990000-aaaa-bbbb-cccc-ddddeeeeffff"),
                            Title = "Second Water def",
                            TotalDissolvedSolids = 800.0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("c3333333-3333-3333-3333-333333333333"),
                            BiologicalOxygenDemand = 2.0,
                            CadmiumConcentration = 0.01,
                            ChemicalOxygenDemand = 0.0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 635, DateTimeKind.Utc).AddTicks(262),
                            CreatorId = new Guid("99990000-aaaa-bbbb-cccc-ddddeeeeffff"),
                            Description = "",
                            DissolvedOxygen = 7.5,
                            EDangerState = 1,
                            ElectricalConductivity = 0.90000000000000002,
                            LeadConcentration = 0.050000000000000003,
                            LocationId = new Guid("b3333333-3333-3333-3333-333333333333"),
                            MercuryConcentration = 0.0050000000000000001,
                            MicrobialActivity = 0.0,
                            MicrobialLoad = 800.0,
                            NitrateConcentration = 10.0,
                            PH = 8.0,
                            PesticidesContent = 0.050000000000000003,
                            PhosphateConcentration = 1.0,
                            RadiationLevel = 0.0,
                            ResponsibleUserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            Title = "Third Water def",
                            TotalDissolvedSolids = 350.0,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Domain.Models.Organization.Laboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Laboratories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(8668),
                            LocationId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Title = "Biomedical Research Lab"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(9007),
                            LocationId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Title = "AI and Machine Learning Lab"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(9011),
                            LocationId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Title = "Genetics and Biotechnology Lab"
                        });
                });

            modelBuilder.Entity("Domain.Models.Organization.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrgLocations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            City = "Kyiv",
                            Country = "Ukraine",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(6609),
                            District = "Shevchenkivsky",
                            Region = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            City = "New York",
                            Country = "USA",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(7525),
                            District = "Manhattan",
                            Region = "New York"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            City = "Berlin",
                            Country = "Germany",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(7530),
                            District = "Mitte",
                            Region = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            City = "Kyiv",
                            Country = "Ukraine",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(7534),
                            District = "Kyiv City District",
                            Region = "Kyiv Oblast"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            City = "New York",
                            Country = "USA",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(7537),
                            District = "Manhattan District",
                            Region = "New York State"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            City = "Berlin",
                            Country = "Germany",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(7538),
                            District = "Mitte District",
                            Region = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            City = "Rio de Janeiro",
                            Country = "Brazil",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(7540),
                            District = "Central District",
                            Region = "Rio de Janeiro State"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            City = "Paris",
                            Country = "France",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(7541),
                            District = "Paris City District",
                            Region = "Île-de-France"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            City = "Tokyo",
                            Country = "Japan",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(7548),
                            District = "Tokyo Metropolis District",
                            Region = "Kantō"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            City = "Rome",
                            Country = "Italy",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(7550),
                            District = "Rome City District",
                            Region = "Lazio"
                        });
                });

            modelBuilder.Entity("Domain.Models.Organization.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(8020),
                            LocationId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Title = "Global Research Institute"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(8414),
                            LocationId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Title = "International Tech Hub"
                        });
                });

            modelBuilder.Entity("Domain.Models.Organization.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AccessTokenExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11112222-3333-4444-5555-666677778888"),
                            AddressId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 480, DateTimeKind.Utc).AddTicks(9649),
                            DateOfBirth = new DateTime(1985, 5, 19, 21, 0, 0, 0, DateTimeKind.Utc),
                            Email = "valentyn@example.com",
                            FirstName = "Valentyn",
                            LaboratoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            LastName = "Riabinchak",
                            OrganizationId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            PasswordHash = "AQAAAAIAAYagAAAAECguO79y3aAyVPpzpWncaB4IYu9PYjpnVFccaS8craV/lS2/wsFIdGgP3zt57jcgng==",
                            PhoneNumber = "+380501234567",
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("99990000-aaaa-bbbb-cccc-ddddeeeeffff"),
                            AddressId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 536, DateTimeKind.Utc).AddTicks(4675),
                            DateOfBirth = new DateTime(1990, 7, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            Email = "igorzayets@example.com",
                            FirstName = "Valentyn",
                            LaboratoryId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            LastName = "Riabinchak",
                            OrganizationId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            PasswordHash = "AQAAAAIAAYagAAAAEAvDOvE1RJIgnTiRC1b1t8ovIg71oxhDmkd+tdUk85PBDMsoLY1lk5hiNFi2OI54yw==",
                            PhoneNumber = "+380631234567",
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            AddressId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2025, 3, 19, 9, 6, 35, 585, DateTimeKind.Utc).AddTicks(5636),
                            DateOfBirth = new DateTime(1980, 3, 9, 22, 0, 0, 0, DateTimeKind.Utc),
                            Email = "igor@example.com",
                            FirstName = "Igor",
                            LaboratoryId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            LastName = "Zaitsev",
                            OrganizationId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            PasswordHash = "AQAAAAIAAYagAAAAEKxFyghqrxHSumgKLFEzw7dG6LzDHXmxeuQErcXaVxRD8l7pFWl/gJI94vUXdtBUHw==",
                            PhoneNumber = "+49 17612345678",
                            Role = 3
                        });
                });

            modelBuilder.Entity("Domain.Models.Analitycs.Report", b =>
                {
                    b.HasOne("Domain.Models.Organization.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Domain.Models.Nature.SoilDeficiency", b =>
                {
                    b.HasOne("Domain.Models.Organization.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Nature.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Organization.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId");

                    b.Navigation("Creator");

                    b.Navigation("Location");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("Domain.Models.Nature.WaterDeficiency", b =>
                {
                    b.HasOne("Domain.Models.Organization.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Nature.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Organization.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId");

                    b.Navigation("Creator");

                    b.Navigation("Location");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("Domain.Models.Organization.Laboratory", b =>
                {
                    b.HasOne("Domain.Models.Organization.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Models.Organization.Organization", b =>
                {
                    b.HasOne("Domain.Models.Organization.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Models.Organization.User", b =>
                {
                    b.HasOne("Domain.Models.Organization.Location", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Models.Organization.Laboratory", "Laboratory")
                        .WithMany("Researchers")
                        .HasForeignKey("LaboratoryId");

                    b.HasOne("Domain.Models.Organization.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Address");

                    b.Navigation("Laboratory");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Domain.Models.Organization.Laboratory", b =>
                {
                    b.Navigation("Researchers");
                });
#pragma warning restore 612, 618
        }
    }
}
