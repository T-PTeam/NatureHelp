// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250923073124_CascadeDeleteOrganization")]
    partial class CascadeDeleteOrganization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Analitycs.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReporterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Topic")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Domain.Models.Analitycs.Research", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResearcherId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("ResearcherId");

                    b.ToTable("Researches");
                });

            modelBuilder.Entity("Domain.Models.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttachmentType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("obj_attachments");

                    b.HasDiscriminator<string>("AttachmentType").HasValue("Attachment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.Audit.ChangedModelLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChangesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeficiencyId")
                        .HasColumnType("uuid");

                    b.Property<int>("DeficiencyType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ChangedModelLogs");
                });

            modelBuilder.Entity("Domain.Models.Audit.DeficiencyMonitoring", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeficiencyId")
                        .HasColumnType("uuid");

                    b.Property<int>("DeficiencyType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMonitoring")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DeficiencyMonitoring");
                });

            modelBuilder.Entity("Domain.Models.CommentMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DeficiencyId")
                        .HasColumnType("uuid");

                    b.Property<int>("DeficiencyType")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Models.Nature.SoilDeficiency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("CadmiumConcentration")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ChangedModelLogEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeficiencyMonitoringId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EDangerState")
                        .HasColumnType("integer");

                    b.Property<double>("ElectricalConductivity")
                        .HasColumnType("double precision");

                    b.Property<double>("HeavyMetalsConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("LeadConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double>("MercuryConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("MicrobialActivity")
                        .HasColumnType("double precision");

                    b.Property<double>("NitratesConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("OrganicMatter")
                        .HasColumnType("double precision");

                    b.Property<double>("PH")
                        .HasColumnType("double precision");

                    b.Property<double>("PesticidesContent")
                        .HasColumnType("double precision");

                    b.Property<double>("RadiusAffected")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ResponsibleUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChangedModelLogEntityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeficiencyMonitoringId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("SoilDeficiencies");
                });

            modelBuilder.Entity("Domain.Models.Nature.WaterDeficiency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<double>("BiologicalOxygenDemand")
                        .HasColumnType("double precision");

                    b.Property<double>("CadmiumConcentration")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ChangedModelLogEntityId")
                        .HasColumnType("uuid");

                    b.Property<double>("ChemicalOxygenDemand")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeficiencyMonitoringId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DissolvedOxygen")
                        .HasColumnType("double precision");

                    b.Property<int>("EDangerState")
                        .HasColumnType("integer");

                    b.Property<double>("ElectricalConductivity")
                        .HasColumnType("double precision");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("LeadConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double>("MercuryConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("MicrobialActivity")
                        .HasColumnType("double precision");

                    b.Property<double>("MicrobialLoad")
                        .HasColumnType("double precision");

                    b.Property<double>("NitrateConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("PH")
                        .HasColumnType("double precision");

                    b.Property<double>("PesticidesContent")
                        .HasColumnType("double precision");

                    b.Property<double>("PhosphateConcentration")
                        .HasColumnType("double precision");

                    b.Property<double>("RadiationLevel")
                        .HasColumnType("double precision");

                    b.Property<double>("RadiusAffected")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ResponsibleUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalDissolvedSolids")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChangedModelLogEntityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeficiencyMonitoringId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("WaterDeficiencies");
                });

            modelBuilder.Entity("Domain.Models.Organization.Laboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("Domain.Models.Organization.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AllowedMembersCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Domain.Models.Organization.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Nature.DeficiencyAttachment", b =>
                {
                    b.HasBaseType("Domain.Models.Attachment");

                    b.Property<Guid>("DeficiencyId")
                        .HasColumnType("uuid");

                    b.Property<int>("DeficiencyType")
                        .HasColumnType("integer");

                    b.ToTable("obj_attachments");

                    b.HasDiscriminator().HasValue("DeficiencyAttachment");
                });

            modelBuilder.Entity("Domain.Models.Analitycs.Report", b =>
                {
                    b.HasOne("Domain.Models.Organization.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Domain.Models.Analitycs.Research", b =>
                {
                    b.HasOne("Domain.Models.Organization.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Organization.User", "Researcher")
                        .WithMany()
                        .HasForeignKey("ResearcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("Researcher");
                });

            modelBuilder.Entity("Domain.Models.Audit.DeficiencyMonitoring", b =>
                {
                    b.HasOne("Domain.Models.Organization.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Nature.SoilDeficiency", b =>
                {
                    b.HasOne("Domain.Models.Audit.ChangedModelLog", "ChangedModelLog")
                        .WithMany()
                        .HasForeignKey("ChangedModelLogEntityId");

                    b.HasOne("Domain.Models.Organization.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Audit.DeficiencyMonitoring", "DeficiencyMonitoring")
                        .WithMany()
                        .HasForeignKey("DeficiencyMonitoringId");

                    b.HasOne("Domain.Models.Organization.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId");

                    b.Navigation("ChangedModelLog");

                    b.Navigation("Creator");

                    b.Navigation("DeficiencyMonitoring");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("Domain.Models.Nature.WaterDeficiency", b =>
                {
                    b.HasOne("Domain.Models.Audit.ChangedModelLog", "ChangedModelLog")
                        .WithMany()
                        .HasForeignKey("ChangedModelLogEntityId");

                    b.HasOne("Domain.Models.Organization.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Audit.DeficiencyMonitoring", "DeficiencyMonitoring")
                        .WithMany()
                        .HasForeignKey("DeficiencyMonitoringId");

                    b.HasOne("Domain.Models.Organization.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId");

                    b.Navigation("ChangedModelLog");

                    b.Navigation("Creator");

                    b.Navigation("DeficiencyMonitoring");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("Domain.Models.Organization.User", b =>
                {
                    b.HasOne("Domain.Models.Organization.Laboratory", "Laboratory")
                        .WithMany("Researchers")
                        .HasForeignKey("LaboratoryId");

                    b.HasOne("Domain.Models.Organization.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.Models.Audit.ComplexMonitoringScheme", "DeficiencyMonitoringScheme", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("isMonitoringSoilDeficiencies")
                                .HasColumnType("boolean");

                            b1.Property<bool>("isMonitoringWaterDeficiencies")
                                .HasColumnType("boolean");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("DeficiencyMonitoringScheme");

                    b.Navigation("Laboratory");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Domain.Models.Organization.Laboratory", b =>
                {
                    b.Navigation("Researchers");
                });
#pragma warning restore 612, 618
        }
    }
}
